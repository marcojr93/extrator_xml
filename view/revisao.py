import streamlit as st
import pandas as pd
import json
import xml.etree.ElementTree as ET
from datetime import datetime
import io
import base64
from typing import Dict, Any, List, Tuple
import os
import sys
import re

# Adicionar o diret√≥rio pai ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from criptografia import SecureDataProcessor
from agents.validador import ValidadorFiscal
from view.main import gerar_relatorio_pdf

def exibir_pagina_revisao():
    """Fun√ß√£o principal de revis√£o chamada pela main.py"""
    st.title("Revis√£o e Corre√ß√£o de NFe")
    st.markdown("---")
    
    # Carregar dados do arquivo tempor√°rio
    dados_temp = carregar_dados_temporarios()
    if not dados_temp:
        st.error("Dados tempor√°rios n√£o encontrados. Execute o processamento dos agentes primeiro.")
        return
    
    # Restaurar dados na sess√£o se n√£o existirem
    restaurar_dados_sessao(dados_temp)
    
    # Inicializar componentes
    processor = SecureDataProcessor()
    
    # Layout em colunas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("Dados da NFe")
        exibir_resumo_nfe()
    
    with col2:
        st.subheader("A√ß√µes")
        exibir_painel_acoes()
    
    st.markdown("---")
    
    # Se√ß√£o principal de insights e edi√ß√£o
    tab1, tab2, tab3 = st.tabs(["Edi√ß√£o Completa XML", "Insights dos Agentes", "Export & Relat√≥rios"])
    
    with tab1:
        exibir_edicao_completa_xml(processor)
    
    with tab2:
        exibir_insights_validador()
    
    with tab3:
        exibir_opcoes_export(processor)

# Fun√ß√µes de verifica√ß√£o removidas - n√£o necess√°rias com sistema de abas

def exibir_resumo_nfe():
    """Exibe resumo b√°sico da NFe carregada"""
    try:
        processor = SecureDataProcessor()
        
        # Descriptografar APENAS campos necess√°rios para exibi√ß√£o (SEM CNPJs)
        campos_exibicao = ['UF', 'Valor Total', 'Raz√£o Social']
        cabecalho = processor.decrypt_sensitive_data(st.session_state.cabecalho_df, campos_exibicao)
        
        # Para produtos, usar apenas campos n√£o sens√≠veis
        campos_produtos_seguros = ['Produto', 'NCM', 'Quantidade', 'Valor Total']
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_produtos_seguros)
        
        # Informa√ß√µes b√°sicas
        st.info(f"**Arquivo:** {st.session_state.arquivo_xml_nome}")
        
        # Dados do cabe√ßalho
        if not cabecalho.empty:
            linha = cabecalho.iloc[0]
            col1, col2 = st.columns(2)
            
            with col1:
                razao_social = str(linha.get('Raz√£o Social', 'N/A'))
                empresa_display = razao_social[:20] + "..." if len(razao_social) > 20 else razao_social
                st.metric("Empresa", empresa_display)
                st.metric("UF", linha.get('UF', 'N/A'))
            
            with col2:
                valor_total = linha.get('Valor Total', 0)
                # Garantir que valor_total √© num√©rico
                try:
                    valor_num = float(valor_total) if valor_total is not None else 0.0
                    st.metric("Valor Total", f"R$ {valor_num:,.2f}")
                except (ValueError, TypeError):
                    st.metric("Valor Total", "R$ 0,00")
                st.metric("Produtos", len(produtos))
        
    except Exception as e:
        st.error(f"Erro ao carregar resumo: {str(e)}")

def exibir_painel_acoes():
    """Painel com a√ß√µes r√°pidas"""
    st.markdown("### A√ß√µes R√°pidas")
    
    if st.button("Revalidar NFe", use_container_width=True):
        revalidar_nfe()
    
    if st.button("Salvar Altera√ß√µes", use_container_width=True):
        salvar_alteracoes()
    
    if st.button("Exportar XML", use_container_width=True):
        exportar_xml_corrigido()
    
    st.markdown("---")
    
    # Estat√≠sticas r√°pidas dos 3 agentes
    resultado_validador = st.session_state.get('resultado_validador', {})
    resultado_analista = st.session_state.get('resultado_analista', {})
    resultado_tributarista = st.session_state.get('resultado_tributarista', {})
    
    st.metric("Oportunidades", len(resultado_validador.get('oportunidades', [])))
    st.metric("Discrep√¢ncias", len(resultado_validador.get('discrepancias', [])))
    st.metric("Solu√ß√µes", len(resultado_analista.get('solucoes_propostas', [])))
    
    # Exposi√ß√£o financeira do tributarista
    analise_riscos = resultado_tributarista.get('analise_riscos', {})
    exposicao = analise_riscos.get('valor_total_exposicao', 0)
    # Garantir que exposicao √© num√©rico
    try:
        exposicao_num = float(exposicao) if exposicao is not None else 0.0
        if exposicao_num > 0:
            st.metric("Exposi√ß√£o", f"R$ {exposicao_num:,.0f}")
    except (ValueError, TypeError):
        # Se n√£o conseguir converter para n√∫mero, n√£o exibir m√©trica
        pass

def exibir_insights_validador():
    """Exibe os insights e an√°lises dos agentes fiscais"""
    st.subheader("An√°lise Fiscal Inteligente")
    
    # Usar resultado do validador j√° processado
    resultado = st.session_state.get('resultado_validador', {})
    
    # Status da an√°lise
    status_emoji = {"sucesso": "", "erro": "", "parcial": ""}
    status = resultado.get('status', 'erro')
    emoji = status_emoji.get(status, "")
    
    st.markdown(f"**{emoji} Status da An√°lise:** {status.title()}")
    
    # Se houver erro, mostrar e parar
    if status == 'erro':
        st.error("Erro na an√°lise fiscal. Verifique a configura√ß√£o da API.")
        st.code(resultado.get('resumo_dropdown', 'Erro desconhecido'))
        return
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Produtos Analisados", resultado.get('produtos_analisados', 0))
    
    with col2:
        st.metric("Oportunidades", len(resultado.get('oportunidades', [])))
    
    with col3:
        st.metric("Discrep√¢ncias", len(resultado.get('discrepancias', [])))
    
    with col4:
        st.metric("Modelo IA", resultado.get('modelo_utilizado', 'N/A'))
    
    # Resumo executivo
    if resultado.get('resumo_executivo'):
        st.markdown("### Resumo Executivo")
        st.markdown(resultado['resumo_executivo'])
    
    # Oportunidades
    oportunidades = resultado.get('oportunidades', [])
    if oportunidades:
        st.markdown("### Oportunidades Identificadas")
        
        for i, oport in enumerate(oportunidades):
            with st.expander(f"üí° {oport.get('tipo', 'Oportunidade')} - {oport.get('produto', 'N/A')}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.markdown(f"**Descri√ß√£o:** {oport.get('descricao', 'N/A')}")
                    st.markdown(f"**Impacto:** {oport.get('impacto', 'N/A')}")
                    st.markdown(f"**A√ß√£o Recomendada:** {oport.get('acao_recomendada', 'N/A')}")
                
                with col2:
                    if st.button(f"‚úèÔ∏è Editar", key=f"edit_oport_{i}"):
                        st.session_state[f'editar_produto_{i}'] = oport.get('produto', '')
                        st.rerun()
    
    # Discrep√¢ncias
    discrepancias = resultado.get('discrepancias', [])
    if discrepancias:
        st.markdown("### Discrep√¢ncias Encontradas")
        
        for i, disc in enumerate(discrepancias):
            gravidade = disc.get('gravidade', 'M√©dia')
            cor = {"Alta": "üî¥", "M√©dia": "üü°", "Baixa": "üü¢"}.get(gravidade, "‚ö™")
            
            with st.expander(f"{cor} {disc.get('tipo', 'Discrep√¢ncia')} - {disc.get('produto', 'N/A')}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.markdown(f"**Problema:** {disc.get('problema', 'N/A')}")
                    st.markdown(f"**Gravidade:** {gravidade}")
                    st.markdown(f"**Corre√ß√£o Sugerida:** {disc.get('correcao', 'N/A')}")
                
                with col2:
                    if st.button(f"Corrigir", key=f"fix_disc_{i}"):
                        st.session_state[f'corrigir_produto_{i}'] = disc.get('produto', '')
                        st.rerun()
    
    # Detalhes t√©cnicos
    if resultado.get('detalhes_tecnicos'):
        with st.expander("Detalhes T√©cnicos"):
            st.markdown(resultado['detalhes_tecnicos'])
    
    # Insights do Analista
    st.markdown("---")
    st.subheader("üî¨ Insights do Analista Fiscal")
    resultado_analista = st.session_state.get('resultado_analista', {})
    
    if resultado_analista.get('status') == 'sucesso':
        solucoes = resultado_analista.get('solucoes_propostas', [])
        if solucoes:
            for i, solucao in enumerate(solucoes):
                with st.expander(f"üí° Solu√ß√£o {i+1}: {solucao.get('tipo_solucao', 'N/A')}"):
                    st.write(f"**Discrep√¢ncia:** {solucao.get('discrepancia_origem', 'N/A')}")
                    st.write(f"**Solu√ß√£o:** {solucao.get('solucao_detalhada', 'N/A')}")
                    st.write(f"**Impacto:** {solucao.get('impacto_esperado', 'N/A')}")
        else:
            st.info("Nenhuma solu√ß√£o adicional necess√°ria - an√°lise validador suficiente")
    else:
        st.warning("Analista encontrou limita√ß√µes no processamento")
    
    # Insights do Tributarista
    st.markdown("---")
    st.subheader("C√°lculos do Tributarista")
    resultado_tributarista = st.session_state.get('resultado_tributarista', {})
    
    if resultado_tributarista.get('status') == 'sucesso':
        # Delta de impostos
        delta_impostos = resultado_tributarista.get('delta_impostos', {})
        if delta_impostos:
            with st.expander("Delta de Impostos", expanded=True):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    icms = delta_impostos.get('icms', {})
                    delta_icms = icms.get('delta', 0)
                    try:
                        delta_icms_num = float(delta_icms) if delta_icms is not None else 0.0
                        st.metric("ICMS Delta", f"R$ {delta_icms_num:,.2f}")
                    except (ValueError, TypeError):
                        st.metric("ICMS Delta", "R$ 0,00")
                
                with col2:
                    pis_cofins = delta_impostos.get('pis_cofins', {})
                    delta_pis_cofins = pis_cofins.get('delta_total', 0)
                    try:
                        delta_pis_cofins_num = float(delta_pis_cofins) if delta_pis_cofins is not None else 0.0
                        st.metric("PIS/COFINS Delta", f"R$ {delta_pis_cofins_num:,.2f}")
                    except (ValueError, TypeError):
                        st.metric("PIS/COFINS Delta", "R$ 0,00")
                
                with col3:
                    ipi = delta_impostos.get('ipi', {})
                    delta_ipi = ipi.get('delta', 0)
                    try:
                        delta_ipi_num = float(delta_ipi) if delta_ipi is not None else 0.0
                        st.metric("üè≠ IPI Delta", f"R$ {delta_ipi_num:,.2f}")
                    except (ValueError, TypeError):
                        st.metric("üè≠ IPI Delta", "R$ 0,00")
        
        # Multas potenciais
        calculo_multas = resultado_tributarista.get('calculo_multas', {})
        if calculo_multas:
            total_multas = calculo_multas.get('total_multas', 0)
            try:
                total_multas_num = float(total_multas) if total_multas is not None else 0.0
                if total_multas_num > 0:
                    with st.expander("Multas Potenciais"):
                        st.metric("üí∏ Total de Multas", f"R$ {total_multas_num:,.2f}")
                        
                        multas = calculo_multas.get('multas_potenciais', [])
                        for multa in multas:
                            valor_multa = multa.get('valor_multa', 0)
                            try:
                                valor_multa_num = float(valor_multa) if valor_multa is not None else 0.0
                                st.write(f"‚Ä¢ **{multa.get('tipo_infracao', 'N/A')}**: R$ {valor_multa_num:,.2f}")
                            except (ValueError, TypeError):
                                st.write(f"‚Ä¢ **{multa.get('tipo_infracao', 'N/A')}**: R$ 0,00")
            except (ValueError, TypeError):
                pass
        
        # An√°lise de riscos
        analise_riscos = resultado_tributarista.get('analise_riscos', {})
        if analise_riscos:
            with st.expander("An√°lise de Riscos"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Risco de Autua√ß√£o:** {analise_riscos.get('risco_autuacao', 'N/A')}")
                    valor_exposicao = analise_riscos.get('valor_total_exposicao', 0)
                    try:
                        valor_exposicao_num = float(valor_exposicao) if valor_exposicao is not None else 0.0
                        st.write(f"**Exposi√ß√£o Total:** R$ {valor_exposicao_num:,.2f}")
                    except (ValueError, TypeError):
                        st.write("**Exposi√ß√£o Total:** R$ 0,00")
                
                with col2:
                    recomendacoes = analise_riscos.get('recomendacoes_urgentes', [])
                    if recomendacoes:
                        st.write("**Recomenda√ß√µes Urgentes:**")
                        for rec in recomendacoes:
                            st.write(f"‚Ä¢ {rec}")
    else:
        st.warning("Tributarista encontrou limita√ß√µes nos c√°lculos")

def exibir_interface_edicao(processor: SecureDataProcessor):
    """Interface para editar produtos com base nos insights"""
    st.subheader("‚úèÔ∏è Edi√ß√£o de Produtos")
    
    try:
        # Descriptografar APENAS campos edit√°veis (SEM dados sens√≠veis como CNPJs)
        campos_editaveis = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
        ]
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_editaveis)
        
        if produtos.empty:
            st.warning("Nenhum produto encontrado para edi√ß√£o.")
            return
        
        # Seletor de produto
        produtos_lista = produtos['Produto'].tolist() if 'Produto' in produtos.columns else [f"Produto {i+1}" for i in range(len(produtos))]
        
        produto_selecionado = st.selectbox(
            "Selecione o produto para editar:",
            produtos_lista,
            key="produto_edicao"
        )
        
        if produto_selecionado:
            idx_produto = produtos_lista.index(produto_selecionado)
            produto_dados = produtos.iloc[idx_produto]
            
            # Interface de edi√ß√£o
            st.markdown(f"### Editando: **{produto_selecionado}**")
            
            # Criar formul√°rio de edi√ß√£o
            with st.form(f"form_produto_{idx_produto}"):
                col1, col2 = st.columns(2)
                
                # Campos edit√°veis principais
                campos_edicao = {}
                
                with col1:
                    st.markdown("#### Dados Fiscais")
                    
                    # NCM
                    if 'NCM' in produto_dados:
                        campos_edicao['NCM'] = st.text_input(
                            "NCM", 
                            value=str(produto_dados['NCM']),
                            help="Nomenclatura Comum do Mercosul"
                        )
                    
                    # CFOP
                    if 'CFOP' in produto_dados:
                        campos_edicao['CFOP'] = st.text_input(
                            "CFOP", 
                            value=str(produto_dados['CFOP']),
                            help="C√≥digo Fiscal de Opera√ß√µes e Presta√ß√µes"
                        )
                    
                    # Al√≠quotas ICMS
                    if 'Al√≠quota ICMS' in produto_dados:
                        aliquota_icms = str(produto_dados['Al√≠quota ICMS']).replace('%', '')
                        campos_edicao['Al√≠quota ICMS'] = st.number_input(
                            "Al√≠quota ICMS (%)", 
                            value=float(aliquota_icms) if aliquota_icms.replace('.', '').isdigit() else 0.0,
                            min_value=0.0,
                            max_value=30.0,
                            step=0.01
                        )
                
                with col2:
                    st.markdown("#### Valores")
                    
                    # Quantidade
                    if 'Quantidade' in produto_dados:
                        campos_edicao['Quantidade'] = st.number_input(
                            "Quantidade", 
                            value=float(produto_dados['Quantidade']) if pd.notna(produto_dados['Quantidade']) else 1.0,
                            min_value=0.01,
                            step=0.01
                        )
                    
                    # Valor Unit√°rio
                    if 'Valor Unit√°rio' in produto_dados:
                        campos_edicao['Valor Unit√°rio'] = st.number_input(
                            "Valor Unit√°rio (R$)", 
                            value=float(produto_dados['Valor Unit√°rio']) if pd.notna(produto_dados['Valor Unit√°rio']) else 0.0,
                            min_value=0.0,
                            step=0.01
                        )
                    
                    # PIS/COFINS
                    if 'Al√≠quota PIS' in produto_dados:
                        aliquota_pis = str(produto_dados['Al√≠quota PIS']).replace('%', '')
                        campos_edicao['Al√≠quota PIS'] = st.number_input(
                            "Al√≠quota PIS (%)", 
                            value=float(aliquota_pis) if aliquota_pis.replace('.', '').isdigit() else 0.0,
                            min_value=0.0,
                            max_value=10.0,
                            step=0.01
                        )
                
                # Mostrar insights relacionados ao produto
                mostrar_insights_produto(produto_selecionado)
                
                # Bot√µes de a√ß√£o
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    aplicar_mudancas = st.form_submit_button("üíæ Aplicar Mudan√ßas", use_container_width=True)
                
                with col2:
                    resetar = st.form_submit_button("üîÑ Resetar", use_container_width=True)
                
                with col3:
                    preview = st.form_submit_button("üëÅÔ∏è Preview", use_container_width=True)
                
                # Processar a√ß√µes do formul√°rio
                if aplicar_mudancas:
                    aplicar_edicoes_produto(processor, idx_produto, campos_edicao)
                
                if resetar:
                    st.rerun()
                
                if preview:
                    mostrar_preview_alteracoes(produto_dados, campos_edicao)
                    
    except Exception as e:
        st.error(f"Erro na interface de edi√ß√£o: {str(e)}")

def mostrar_insights_produto(produto_nome: str):
    """Mostra insights espec√≠ficos do produto selecionado"""
    if 'resultado_validacao' not in st.session_state:
        return
    
    resultado = st.session_state.resultado_validacao
    insights_produto = []
    
    # Buscar oportunidades para este produto
    for oport in resultado.get('oportunidades', []):
        if produto_nome.lower() in oport.get('produto', '').lower():
            insights_produto.append(('Oportunidade', oport))
    
    # Buscar discrep√¢ncias para este produto
    for disc in resultado.get('discrepancias', []):
        if produto_nome.lower() in disc.get('produto', '').lower():
            insights_produto.append(('Discrep√¢ncia', disc))
    
    if insights_produto:
        st.markdown("#### üí° Insights para este Produto")
        
        for tipo, insight in insights_produto:
            with st.expander(f"{tipo}: {insight.get('tipo', 'N/A')}"):
                if 'descricao' in insight:
                    st.write(f"**Descri√ß√£o:** {insight['descricao']}")
                if 'problema' in insight:
                    st.write(f"**Problema:** {insight['problema']}")
                if 'acao_recomendada' in insight:
                    st.write(f"**A√ß√£o:** {insight['acao_recomendada']}")
                if 'correcao' in insight:
                    st.write(f"**Corre√ß√£o:** {insight['correcao']}")

def aplicar_edicoes_produto(processor: SecureDataProcessor, idx_produto: int, campos_edicao: Dict[str, Any]):
    """Aplica as edi√ß√µes ao produto selecionado"""
    try:
        # Descriptografar APENAS campos edit√°veis (preserva dados sens√≠veis criptografados)
        campos_editaveis = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
        ]
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_editaveis)
        
        # Aplicar mudan√ßas
        for campo, valor in campos_edicao.items():
            if campo in produtos.columns:
                if campo in ['Al√≠quota ICMS', 'Al√≠quota PIS', 'Al√≠quota COFINS']:
                    produtos.iloc[idx_produto, produtos.columns.get_loc(campo)] = f"{valor}%"
                else:
                    produtos.iloc[idx_produto, produtos.columns.get_loc(campo)] = valor
        
        # Recalcular valores dependentes
        if 'Quantidade' in campos_edicao and 'Valor Unit√°rio' in campos_edicao:
            valor_total = campos_edicao['Quantidade'] * campos_edicao['Valor Unit√°rio']
            if 'Valor Total' in produtos.columns:
                produtos.iloc[idx_produto, produtos.columns.get_loc('Valor Total')] = valor_total
        
        # Criptografar e salvar de volta
        produtos_criptografados = processor.encrypt_sensitive_data(produtos)
        st.session_state.produtos_df = produtos_criptografados
        
        # Marcar como editado
        if 'alteracoes_realizadas' not in st.session_state:
            st.session_state.alteracoes_realizadas = []
        
        st.session_state.alteracoes_realizadas.append({
            'produto': produtos.iloc[idx_produto]['Produto'] if 'Produto' in produtos.columns else f'Produto {idx_produto+1}',
            'campos': list(campos_edicao.keys()),
            'timestamp': datetime.now().isoformat()
        })
        
        st.success("Altera√ß√µes aplicadas com sucesso!")
        
        # Invalidar valida√ß√£o anterior para for√ßar nova an√°lise
        if 'resultado_validacao' in st.session_state:
            del st.session_state.resultado_validacao
        
    except Exception as e:
        st.error(f"Erro ao aplicar altera√ß√µes: {str(e)}")

def mostrar_preview_alteracoes(produto_original: pd.Series, campos_edicao: Dict[str, Any]):
    """Mostra preview das altera√ß√µes antes de aplicar"""
    st.markdown("#### üëÅÔ∏è Preview das Altera√ß√µes")
    
    mudancas = []
    for campo, novo_valor in campos_edicao.items():
        if campo in produto_original:
            valor_original = produto_original[campo]
            
            # Formata√ß√£o especial para al√≠quotas
            if campo in ['Al√≠quota ICMS', 'Al√≠quota PIS', 'Al√≠quota COFINS']:
                valor_original_fmt = str(valor_original)
                novo_valor_fmt = f"{novo_valor}%"
            else:
                valor_original_fmt = str(valor_original)
                novo_valor_fmt = str(novo_valor)
            
            if valor_original_fmt != novo_valor_fmt:
                mudancas.append({
                    'campo': campo,
                    'original': valor_original_fmt,
                    'novo': novo_valor_fmt
                })
    
    if mudancas:
        for mudanca in mudancas:
            col1, col2, col3 = st.columns(3)
            with col1:
                st.write(f"**{mudanca['campo']}**")
            with col2:
                st.write(f"~~{mudanca['original']}~~")
            with col3:
                st.write(f"{mudanca['novo']}")
    else:
        st.info("Nenhuma altera√ß√£o detectada.")

def exibir_opcoes_export(processor: SecureDataProcessor):
    """Op√ß√µes de exporta√ß√£o e relat√≥rios"""
    st.subheader("Exporta√ß√£o e Relat√≥rios")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Exportar Dados")
        
        if st.button("Exportar Planilha Excel", use_container_width=True):
            exportar_excel(processor)
        
        if st.button("Exportar CSV", use_container_width=True):
            exportar_csv(processor)
        
        if st.button("Download XML Corrigido", use_container_width=True):
            exportar_xml_corrigido()
        
        if st.button("Visualizar XML Revisado", use_container_width=True):
            visualizar_xml_dropdown(processor)
    
    with col2:
        st.markdown("### Relat√≥rios")
        
        # Bot√£o de download PDF direto (sem rerun)
        if 'resultado_validador' in st.session_state and 'resultado_analista' in st.session_state and 'resultado_tributarista' in st.session_state:
            try:
                resultado_completo = {
                    'validador': st.session_state.resultado_validador,
                    'analista': st.session_state.resultado_analista,
                    'tributarista': st.session_state.resultado_tributarista,
                    'timestamp_processamento': st.session_state.get('timestamp_processamento', datetime.now().strftime('%Y-%m-%d_%H-%M-%S')),
                    'resumo_execucao': st.session_state.get('resumo_execucao', {})
                }
                
                pdf_data = gerar_relatorio_pdf(resultado_completo, st.session_state.get('arquivo_xml_nome', 'arquivo'))
                if pdf_data:
                    st.download_button(
                        label="Download Relat√≥rio PDF Completo",
                        data=pdf_data,
                        file_name=f"relatorio_fiscal_{resultado_completo.get('timestamp_processamento', 'unknown').replace(':', '-')[:19]}.pdf",
                        mime="application/pdf",
                        use_container_width=True,
                        type="primary"
                    )
            except Exception as e:
                st.error(f"Erro ao gerar PDF: {str(e)}")
        
        if st.button("Relat√≥rio de Altera√ß√µes", use_container_width=True):
            gerar_relatorio_alteracoes()
        
        if st.button("Relat√≥rio de Oportunidades", use_container_width=True):
            gerar_relatorio_oportunidades()
        
        if st.button("Ver Relat√≥rio Tribut√°rio Completo", use_container_width=True):
            exibir_relatorio_tributarista_completo()
        
        if st.button("Relat√≥rio de Discrep√¢ncias", use_container_width=True):
            gerar_relatorio_discrepancias()
    
    # Hist√≥rico de altera√ß√µes
    if 'alteracoes_realizadas' in st.session_state and st.session_state.alteracoes_realizadas:
        st.markdown("### üìù Hist√≥rico de Altera√ß√µes")
        
        for i, alteracao in enumerate(st.session_state.alteracoes_realizadas):
            with st.expander(f"‚úèÔ∏è {alteracao['produto']} - {alteracao['timestamp'][:19]}"):
                st.write(f"**Campos alterados:** {', '.join(alteracao['campos'])}")

def revalidar_nfe():
    """Revalida a NFe ap√≥s altera√ß√µes usando orquestra√ß√£o completa"""
    try:
        with st.spinner("üîÑ Reprocessando com todos os agentes..."):
            from agents.orquestrador import processar_nfe_completa
            
            def callback_simples(msg):
                st.write(msg)
            
            # Reprocessar com orquestra√ß√£o completa
            resultado_completo = processar_nfe_completa(
                st.session_state.cabecalho_df,
                st.session_state.produtos_df,
                callback_simples
            )
            
            # Atualizar resultados na sess√£o
            st.session_state.resultado_validador = resultado_completo.get('validador', {})
            st.session_state.resultado_analista = resultado_completo.get('analista', {})
            st.session_state.resultado_tributarista = resultado_completo.get('tributarista', {})
            
        st.success("Reprocessamento completo realizado!")
        st.rerun()
        
    except Exception as e:
        st.error(f"Erro no reprocessamento: {str(e)}")

def salvar_alteracoes():
    """Salva as altera√ß√µes realizadas"""
    if 'alteracoes_realizadas' not in st.session_state or not st.session_state.alteracoes_realizadas:
        st.warning("Nenhuma altera√ß√£o para salvar.")
        return
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"nfe_editada_{timestamp}.json"
        
        dados_para_salvar = {
            'arquivo_original': st.session_state.arquivo_xml_nome,
            'alteracoes': st.session_state.alteracoes_realizadas,
            'timestamp': timestamp,
            'total_alteracoes': len(st.session_state.alteracoes_realizadas)
        }
        
        # Simular salvamento (em produ√ß√£o, salvaria em arquivo)
        st.success(f"Altera√ß√µes salvas como: {nome_arquivo}")
        st.json(dados_para_salvar)
        
    except Exception as e:
        st.error(f"Erro ao salvar: {str(e)}")

def exportar_xml_corrigido():
    """Exporta XML com as corre√ß√µes aplicadas"""
    try:
        processor = SecureDataProcessor()
        # Descriptografar APENAS campos n√£o sens√≠veis para export XML
        campos_export_cabecalho = ['Natureza da Opera√ß√£o', 'CFOP', 'UF', 'Valor Total', 'Data']
        campos_export_produtos = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
        ]
        cabecalho = processor.decrypt_sensitive_data(st.session_state.cabecalho_df, campos_export_cabecalho)
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_export_produtos)
        
        # Gerar XML b√°sico com os dados revisados
        xml_content = gerar_xml_revisado(cabecalho, produtos)
        
        st.download_button(
            label="ÔøΩ Download XML Revisado",
            data=xml_content,
            file_name=f"nfe_revisada_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xml",
            mime="application/xml"
        )
        
    except Exception as e:
        st.error(f"Erro ao exportar XML: {str(e)}")

def visualizar_xml_dropdown(processor: SecureDataProcessor):
    """Visualiza as informa√ß√µes do XML revisado em dropdown"""
    try:
        # Descriptografar APENAS campos seguros para visualiza√ß√£o
        campos_viz_cabecalho = ['Raz√£o Social', 'UF', 'Natureza da Opera√ß√£o', 'CFOP', 'Valor Total']
        campos_viz_produtos = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS'
        ]
        cabecalho = processor.decrypt_sensitive_data(st.session_state.cabecalho_df, campos_viz_cabecalho)
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_viz_produtos)
        
        st.markdown("### üëÅÔ∏è Visualiza√ß√£o do XML Revisado")
        
        # Informa√ß√µes do cabe√ßalho
        with st.expander("Dados do Cabe√ßalho", expanded=True):
            if not cabecalho.empty:
                linha = cabecalho.iloc[0]
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Raz√£o Social:** {linha.get('Raz√£o Social', 'N/A')}")
                    st.write(f"**UF:** {linha.get('UF', 'N/A')}")
                    st.write(f"**CFOP:** {linha.get('CFOP', 'N/A')}")
                
                with col2:
                    st.write(f"**Natureza da Opera√ß√£o:** {linha.get('Natureza da Opera√ß√£o', 'N/A')}")
                    st.write(f"**CFOP:** {linha.get('CFOP', 'N/A')}")
                    valor_total = linha.get('Valor Total', 0)
                    try:
                        valor_total_num = float(valor_total) if valor_total is not None else 0.0
                        st.write(f"**Valor Total:** R$ {valor_total_num:,.2f}")
                    except (ValueError, TypeError):
                        st.write("**Valor Total:** R$ 0,00")
        
        # Produtos revisados
        with st.expander("Produtos Revisados", expanded=True):
            st.dataframe(
                produtos,
                use_container_width=True,
                hide_index=True
            )
        
        # Resumo das altera√ß√µes
        if 'alteracoes_realizadas' in st.session_state and st.session_state.alteracoes_realizadas:
            with st.expander("‚úèÔ∏è Resumo das Altera√ß√µes"):
                for i, alt in enumerate(st.session_state.alteracoes_realizadas, 1):
                    st.write(f"**{i}.** {alt['produto']}")
                    st.write(f"   üìù Campos alterados: {', '.join(alt['campos'])}")
                    st.write(f"   üïê Data: {alt['timestamp'][:19]}")
                    st.write("---")
        
        # An√°lise fiscal atual
        if 'resultado_validacao' in st.session_state:
            resultado = st.session_state.resultado_validacao
            with st.expander("Status da An√°lise Fiscal"):
                st.write(f"**Status:** {resultado.get('status', 'N/A')}")
                st.write(f"**Produtos Analisados:** {resultado.get('produtos_analisados', 0)}")
                st.write(f"**Oportunidades:** {len(resultado.get('oportunidades', []))}")
                st.write(f"**Discrep√¢ncias:** {len(resultado.get('discrepancias', []))}")
        
    except Exception as e:
        st.error(f"Erro na visualiza√ß√£o: {str(e)}")

def gerar_xml_revisado(cabecalho: pd.DataFrame, produtos: pd.DataFrame) -> str:
    """Gera conte√∫do XML com os dados revisados"""
    try:
        # Fun√ß√£o para limpar nomes de tags XML
        def limpar_nome_tag(nome):
            # Remove caracteres especiais e espa√ßos, substitui por underscore
            nome_limpo = re.sub(r'[^a-zA-Z0-9_]', '_', nome)
            # Remove underscores m√∫ltiplos
            nome_limpo = re.sub(r'_+', '_', nome_limpo)
            # Remove underscore no in√≠cio e fim
            nome_limpo = nome_limpo.strip('_')
            # Garante que comece com letra
            if nome_limpo and nome_limpo[0].isdigit():
                nome_limpo = 'field_' + nome_limpo
            return nome_limpo.lower() if nome_limpo else 'field_unknown'
        
        # Fun√ß√£o para escapar conte√∫do XML
        def escapar_xml(texto):
            if texto is None:
                return ''
            texto_str = str(texto)
            # Escapar caracteres especiais XML
            texto_str = texto_str.replace('&', '&amp;')
            texto_str = texto_str.replace('<', '&lt;')  
            texto_str = texto_str.replace('>', '&gt;')
            texto_str = texto_str.replace('"', '&quot;')
            texto_str = texto_str.replace("'", '&apos;')
            return texto_str
        
        # Estrutura XML b√°sica
        xml_lines = [
            '<?xml version="1.0" encoding="UTF-8"?>',
            '<nfe_revisada>',
            '  <metadata>',
            f'    <data_revisao>{datetime.now().isoformat()}</data_revisao>',
            f'    <arquivo_original>{escapar_xml(st.session_state.get("arquivo_xml_nome", "N/A"))}</arquivo_original>',
            '  </metadata>',
            '  <cabecalho>'
        ]
        
        # Adicionar dados do cabe√ßalho
        if not cabecalho.empty:
            linha = cabecalho.iloc[0]
            for coluna, valor in linha.items():
                if pd.notna(valor):
                    tag_name = limpar_nome_tag(coluna)
                    valor_escapado = escapar_xml(valor)
                    xml_lines.append(f'    <{tag_name}>{valor_escapado}</{tag_name}>')
        
        xml_lines.append('  </cabecalho>')
        xml_lines.append('  <produtos>')
        
        # Adicionar produtos
        for idx, produto in produtos.iterrows():
            xml_lines.append(f'    <produto id="{idx + 1}">')
            for coluna, valor in produto.items():
                if pd.notna(valor):
                    tag_name = limpar_nome_tag(coluna)
                    valor_escapado = escapar_xml(valor)
                    xml_lines.append(f'      <{tag_name}>{valor_escapado}</{tag_name}>')
            xml_lines.append('    </produto>')
        
        xml_lines.append('  </produtos>')
        
        # Adicionar altera√ß√µes se existirem
        if 'alteracoes_realizadas' in st.session_state and st.session_state.alteracoes_realizadas:
            xml_lines.append('  <alteracoes>')
            for alt in st.session_state.alteracoes_realizadas:
                xml_lines.append('    <alteracao>')
                xml_lines.append(f'      <produto>{alt["produto"]}</produto>')
                xml_lines.append(f'      <campos>{", ".join(alt["campos"])}</campos>')
                xml_lines.append(f'      <timestamp>{alt["timestamp"]}</timestamp>')
                xml_lines.append('    </alteracao>')
            xml_lines.append('  </alteracoes>')
        
        xml_lines.append('</nfe_revisada>')
        
        return '\n'.join(xml_lines)
        
    except Exception as e:
        return f'<?xml version="1.0" encoding="UTF-8"?>\n<erro>Erro ao gerar XML: {str(e)}</erro>'

def exportar_excel(processor: SecureDataProcessor):
    """Exporta dados para Excel"""
    try:
        # Export APENAS campos n√£o sens√≠veis para Excel
        campos_export_cabecalho = ['Raz√£o Social', 'UF', 'Natureza da Opera√ß√£o', 'CFOP', 'Valor Total', 'Data']
        campos_export_produtos = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
        ]
        cabecalho = processor.decrypt_sensitive_data(st.session_state.cabecalho_df, campos_export_cabecalho)
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_export_produtos)
        
        # Criar buffer para Excel
        buffer = io.BytesIO()
        
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            cabecalho.to_excel(writer, sheet_name='Cabe√ßalho', index=False)
            produtos.to_excel(writer, sheet_name='Produtos', index=False)
            
            if 'alteracoes_realizadas' in st.session_state:
                alteracoes_df = pd.DataFrame(st.session_state.alteracoes_realizadas)
                alteracoes_df.to_excel(writer, sheet_name='Altera√ß√µes', index=False)
        
        buffer.seek(0)
        
        st.download_button(
            label="Download Excel",
            data=buffer.getvalue(),
            file_name=f"nfe_revisada_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
    except Exception as e:
        st.error(f"Erro no export Excel: {str(e)}")

def exportar_csv(processor: SecureDataProcessor):
    """Exporta dados para CSV"""
    try:
        # Export CSV APENAS com campos n√£o sens√≠veis
        campos_export_produtos = [
            'Produto', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
            'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS',
            'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
        ]
        produtos = processor.decrypt_sensitive_data(st.session_state.produtos_df, campos_export_produtos)
        
        csv_buffer = io.StringIO()
        produtos.to_csv(csv_buffer, index=False, encoding='utf-8')
        
        st.download_button(
            label="Download CSV",
            data=csv_buffer.getvalue(),
            file_name=f"produtos_revisados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
        
    except Exception as e:
        st.error(f"Erro no export CSV: {str(e)}")

def gerar_relatorio_alteracoes():
    """Gera relat√≥rio das altera√ß√µes realizadas"""
    if 'alteracoes_realizadas' not in st.session_state or not st.session_state.alteracoes_realizadas:
        st.warning("Nenhuma altera√ß√£o registrada.")
        return
    
    st.markdown("### Relat√≥rio de Altera√ß√µes")
    
    alteracoes = st.session_state.alteracoes_realizadas
    
    # Estat√≠sticas
    total_alteracoes = len(alteracoes)
    produtos_editados = len(set([alt['produto'] for alt in alteracoes]))
    campos_mais_editados = pd.Series([campo for alt in alteracoes for campo in alt['campos']]).value_counts()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Altera√ß√µes", total_alteracoes)
    with col2:
        st.metric("Produtos Editados", produtos_editados)
    with col3:
        st.metric("Sess√µes de Edi√ß√£o", len(alteracoes))
    
    # Campos mais editados
    if not campos_mais_editados.empty:
        st.markdown("#### Campos Mais Editados")
        st.bar_chart(campos_mais_editados)
    
    # Lista detalhada
    st.markdown("#### üìù Detalhes das Altera√ß√µes")
    for i, alt in enumerate(alteracoes, 1):
        st.write(f"**{i}.** {alt['produto']} - {alt['timestamp'][:19]}")
        st.write(f"   Campos: {', '.join(alt['campos'])}")

def gerar_relatorio_oportunidades():
    """Gera relat√≥rio de oportunidades fiscais"""
    if 'resultado_validacao' not in st.session_state:
        st.warning("Execute a valida√ß√£o primeiro.")
        return
    
    oportunidades = st.session_state.resultado_validacao.get('oportunidades', [])
    
    if not oportunidades:
        st.info("Nenhuma oportunidade identificada.")
        return
    
    st.markdown("### Relat√≥rio de Oportunidades")
    
    # Categorizar oportunidades
    categorias = {}
    for oport in oportunidades:
        categoria = oport.get('tipo', 'Outras')
        if categoria not in categorias:
            categorias[categoria] = []
        categorias[categoria].append(oport)
    
    # Mostrar por categoria
    for categoria, lista in categorias.items():
        st.markdown(f"#### {categoria} ({len(lista)} oportunidades)")
        
        for oport in lista:
            with st.expander(f"üí° {oport.get('produto', 'N/A')}"):
                st.write(f"**Descri√ß√£o:** {oport.get('descricao', 'N/A')}")
                st.write(f"**Impacto:** {oport.get('impacto', 'N/A')}")
                st.write(f"**A√ß√£o:** {oport.get('acao_recomendada', 'N/A')}")

def gerar_relatorio_discrepancias():
    """Gera relat√≥rio de discrep√¢ncias encontradas"""
    if 'resultado_validacao' not in st.session_state:
        st.warning("Execute a valida√ß√£o primeiro.")
        return
    
    discrepancias = st.session_state.resultado_validacao.get('discrepancias', [])
    
    if not discrepancias:
        st.info("Nenhuma discrep√¢ncia encontrada.")
        return
    
    st.markdown("### Relat√≥rio de Discrep√¢ncias")
    
    # Agrupar por gravidade
    por_gravidade = {"Alta": [], "M√©dia": [], "Baixa": []}
    for disc in discrepancias:
        gravidade = disc.get('gravidade', 'M√©dia')
        if gravidade in por_gravidade:
            por_gravidade[gravidade].append(disc)
    
    # Mostrar por gravidade
    cores = {"Alta": "üî¥", "M√©dia": "üü°", "Baixa": "üü¢"}
    
    for gravidade, lista in por_gravidade.items():
        if lista:
            st.markdown(f"#### {cores[gravidade]} {gravidade} ({len(lista)} discrep√¢ncias)")
            
            for disc in lista:
                with st.expander(f"{cores[gravidade]} {disc.get('produto', 'N/A')}"):
                    st.write(f"**Tipo:** {disc.get('tipo', 'N/A')}")
                    st.write(f"**Problema:** {disc.get('problema', 'N/A')}")
                    st.write(f"**Corre√ß√£o:** {disc.get('correcao', 'N/A')}")

def carregar_dados_temporarios():
    """Carrega dados do arquivo tempor√°rio JSON"""
    import json
    import os
    
    try:
        # Caminho absoluto para garantir que encontre o arquivo
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        arquivo_temp = os.path.join(base_dir, 'temp_nfe_data.json')
        
        if os.path.exists(arquivo_temp):
            with open(arquivo_temp, 'r', encoding='utf-8') as f:
                dados = json.load(f)
                st.success(f"Dados carregados do arquivo tempor√°rio (salvo em: {dados.get('timestamp_salvamento', 'N/A')})")
                return dados
        else:
            st.warning(f"Arquivo tempor√°rio n√£o encontrado em: {arquivo_temp}")
            return None
            
    except Exception as e:
        st.error(f"Erro ao carregar dados tempor√°rios: {str(e)}")
        return None


def restaurar_dados_sessao(dados_temp):
    """Restaura dados na sess√£o a partir do arquivo tempor√°rio"""
    try:
        # Restaurar DataFrames
        if 'cabecalho_df' not in st.session_state and dados_temp.get('cabecalho_df'):
            st.session_state.cabecalho_df = pd.DataFrame(dados_temp['cabecalho_df'])
            
        if 'produtos_df' not in st.session_state and dados_temp.get('produtos_df'):
            st.session_state.produtos_df = pd.DataFrame(dados_temp['produtos_df'])
        
        # Restaurar resultados dos agentes
        st.session_state.resultado_validador = dados_temp.get('resultado_validador', {})
        st.session_state.resultado_analista = dados_temp.get('resultado_analista', {})
        st.session_state.resultado_tributarista = dados_temp.get('resultado_tributarista', {})
        st.session_state.resumo_execucao = dados_temp.get('resumo_execucao', {})
        
        # Restaurar outras informa√ß√µes
        st.session_state.arquivo_xml_nome = dados_temp.get('arquivo_xml_nome', 'Arquivo n√£o identificado')
        st.session_state.agentes_processados = True
        st.session_state.timestamp_processamento = dados_temp.get('timestamp_processamento')
        
        st.info("Dados restaurados na sess√£o a partir do arquivo tempor√°rio")
        
    except Exception as e:
        st.error(f"Erro ao restaurar dados na sess√£o: {str(e)}")


def exibir_edicao_completa_xml(processor):
    """Interface de edi√ß√£o completa de todos os campos XML com sugest√µes"""
    st.subheader("Edi√ß√£o Completa dos Dados XML")
    
    # Verificar se dados XML est√£o dispon√≠veis
    if 'cabecalho_df' not in st.session_state or 'produtos_df' not in st.session_state:
        st.error("Dados XML n√£o encontrados. Fa√ßa upload de um arquivo XML primeiro.")
        return
    
    st.markdown("Edite os campos abaixo. As sugest√µes dos agentes aparecem quando dispon√≠veis.")
    
    # Descriptografar dados para edi√ß√£o
    try:
        cabecalho_original = processor.decrypt_sensitive_data(st.session_state.cabecalho_df)
        produtos_original = processor.decrypt_sensitive_data(st.session_state.produtos_df)
        
        # Obter sugest√µes dos agentes (se dispon√≠veis)
        resultado_validador = st.session_state.get('resultado_validador', {})
        resultado_analista = st.session_state.get('resultado_analista', {})
        resultado_tributarista = st.session_state.get('resultado_tributarista', {})
        
        # Verificar se agentes foram processados
        agentes_processados = st.session_state.get('agentes_processados', False)
        
        if agentes_processados:
            st.info("Sugest√µes dos agentes IA dispon√≠veis abaixo dos campos")
        else:
            st.warning("Execute 'An√°lise com IA' para obter sugest√µes dos agentes")
        
        # Criar mapeamento de sugest√µes por campo
        sugestoes = criar_mapeamento_sugestoes(resultado_validador, resultado_analista, resultado_tributarista)
        
        # Interface de edi√ß√£o do cabe√ßalho
        st.markdown("### Dados do Cabe√ßalho")
        cabecalho_editado = editar_campos_cabecalho(cabecalho_original, sugestoes)
        
        # Interface de edi√ß√£o dos produtos
        st.markdown("### Dados dos Produtos")
        produtos_editados = editar_campos_produtos(produtos_original, sugestoes)
        
        # Bot√µes de salvamento
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Salvar Altera√ß√µes", type="primary", use_container_width=True):
                salvar_alteracoes_xml(cabecalho_editado, produtos_editados, processor)
        
        with col2:
            if st.button("Gerar XML Corrigido", use_container_width=True):
                gerar_xml_corrigido(cabecalho_editado, produtos_editados)
                
    except Exception as e:
        st.error(f"Erro ao carregar dados para edi√ß√£o: {str(e)}")

def criar_mapeamento_sugestoes(validador, analista, tributarista):
    """Cria mapeamento de sugest√µes por campo"""
    sugestoes = {}
    
    # Verificar se dados dos agentes est√£o dispon√≠veis
    if not validador and not analista and not tributarista:
        return sugestoes
    
    # Sugest√µes do validador (se dispon√≠vel)
    if validador and isinstance(validador, dict):
        for disc in validador.get('discrepancias', []):
            campo = disc.get('campo_afetado', disc.get('tipo', ''))
            if campo:
                sugestoes[campo] = {
                    'tipo': 'discrepancia',
                    'mensagem': disc.get('correcao', disc.get('problema', '')),
                    'gravidade': disc.get('gravidade', 'M√©dia')
                }
        
        for oport in validador.get('oportunidades', []):
            campo = oport.get('campo_afetado', oport.get('tipo', ''))
            if campo:
                sugestoes[campo] = {
                    'tipo': 'oportunidade', 
                    'mensagem': oport.get('acao_recomendada', oport.get('descricao', '')),
                    'impacto': oport.get('impacto', 'Positivo')
                }
    
    # Sugest√µes do analista (se dispon√≠vel)
    if analista and isinstance(analista, dict):
        for analise in analista.get('analises_detalhadas', []):
            campo = analise.get('campo_relacionado', 'Geral')
            if campo and campo != 'Geral':
                sugestoes[campo] = {
                    'tipo': 'analise',
                    'mensagem': analise.get('solucao_proposta', ''),
                    'complexidade': analise.get('grau_complexidade', 'M√©dia')
                }
    
    return sugestoes

def editar_campos_cabecalho(cabecalho_df, sugestoes):
    """Interface de edi√ß√£o dos campos do cabe√ßalho"""
    if cabecalho_df.empty:
        st.warning("Dados do cabe√ßalho n√£o dispon√≠veis")
        return cabecalho_df
    
    linha = cabecalho_df.iloc[0]
    campos_editados = {}
    
    # Campos principais para edi√ß√£o
    campos_principais = [
        'Emitente CNPJ', 'Emitente Nome', 'Emitente IE', 
        'Destinat√°rio CNPJ', 'Destinat√°rio Nome', 'Destinat√°rio IE',
        'N√∫mero NF', 'S√©rie', 'Natureza Opera√ß√£o', 'CFOP',
        'Valor Total', 'Base ICMS', 'Valor ICMS', 'Valor PIS', 'Valor COFINS', 'Valor IPI'
    ]
    
    for campo in campos_principais:
        if campo in linha:
            valor_original = linha[campo]
            
            # Campo de edi√ß√£o
            if 'Valor' in campo and pd.api.types.is_numeric_dtype(type(valor_original)):
                valor_editado = st.number_input(
                    f"**{campo}**",
                    value=float(valor_original) if valor_original else 0.0,
                    format="%.2f",
                    key=f"cab_{campo}"
                )
            else:
                valor_editado = st.text_input(
                    f"**{campo}**",
                    value=str(valor_original) if valor_original else "",
                    key=f"cab_{campo}"
                )
            
            campos_editados[campo] = valor_editado
            
            # Mostrar sugest√£o se existir
            mostrar_sugestao_campo(campo, sugestoes)
    
    # Atualizar DataFrame
    cabecalho_editado = cabecalho_df.copy()
    for campo, valor in campos_editados.items():
        cabecalho_editado.loc[0, campo] = valor
    
    return cabecalho_editado

def editar_campos_produtos(produtos_df, sugestoes):
    """Interface de edi√ß√£o dos campos dos produtos"""
    if produtos_df.empty:
        st.warning("Dados dos produtos n√£o dispon√≠veis")
        return produtos_df
    
    produtos_editados = produtos_df.copy()
    
    # Campos principais dos produtos
    campos_produto = [
        'Descri√ß√£o', 'NCM', 'CFOP', 'Quantidade', 'Valor Unit√°rio', 'Valor Total',
        'Al√≠quota ICMS', 'Valor ICMS', 'Al√≠quota PIS', 'Valor PIS', 
        'Al√≠quota COFINS', 'Valor COFINS', 'Al√≠quota IPI', 'Valor IPI'
    ]
    
    for idx, produto in produtos_df.iterrows():
        st.markdown(f"**Produto {idx + 1}**")
        
        for campo in campos_produto:
            if campo in produto:
                valor_original = produto[campo]
                
                # Campo de edi√ß√£o
                if 'Valor' in campo or 'Quantidade' in campo:
                    if pd.api.types.is_numeric_dtype(type(valor_original)):
                        valor_editado = st.number_input(
                            f"{campo}",
                            value=float(valor_original) if valor_original else 0.0,
                            format="%.2f",
                            key=f"prod_{idx}_{campo}"
                        )
                    else:
                        valor_editado = st.text_input(
                            f"{campo}",
                            value=str(valor_original) if valor_original else "",
                            key=f"prod_{idx}_{campo}"
                        )
                else:
                    valor_editado = st.text_input(
                        f"{campo}",
                        value=str(valor_original) if valor_original else "",
                        key=f"prod_{idx}_{campo}"
                    )
                
                produtos_editados.loc[idx, campo] = valor_editado
                
                # Mostrar sugest√£o se existir
                mostrar_sugestao_campo(f"{campo}_produto_{idx}", sugestoes)
        
        st.markdown("---")
    
    return produtos_editados

def mostrar_sugestao_campo(campo, sugestoes):
    """Mostra sugest√£o para um campo espec√≠fico"""
    sugestao = sugestoes.get(campo)
    if sugestao:
        tipo = sugestao.get('tipo', 'info')
        mensagem = sugestao.get('mensagem', '')
        
        if tipo == 'discrepancia':
            st.error(f"Corre√ß√£o sugerida: {mensagem}")
        elif tipo == 'oportunidade':
            st.success(f"Oportunidade: {mensagem}")
        elif tipo == 'analise':
            st.info(f"An√°lise: {mensagem}")
    else:
        # Buscar sugest√µes gen√©ricas
        for chave, sugestao in sugestoes.items():
            if chave.lower() in campo.lower():
                st.info(f"Sugest√£o relacionada: {sugestao.get('mensagem', '')}")
                break

def salvar_alteracoes_xml(cabecalho_editado, produtos_editados, processor):
    """Salva altera√ß√µes nos dados XML"""
    try:
        # Criptografar dados editados
        cabecalho_criptografado = processor.encrypt_sensitive_data(cabecalho_editado)
        produtos_criptografados = processor.encrypt_sensitive_data(produtos_editados)
        
        # Atualizar sess√£o
        st.session_state.cabecalho_df = cabecalho_criptografado
        st.session_state.produtos_df = produtos_criptografados
        
        st.success("Altera√ß√µes salvas com sucesso!")
        
    except Exception as e:
        st.error(f"Erro ao salvar altera√ß√µes: {str(e)}")

def gerar_xml_corrigido(cabecalho_editado, produtos_editados):
    """Gera XML corrigido com os dados editados"""
    try:
        # Gerar XML b√°sico (implementa√ß√£o simplificada)
        xml_corrigido = "<NFe>\n"
        xml_corrigido += "  <Cabecalho>\n"
        
        for campo, valor in cabecalho_editado.iloc[0].items():
            xml_corrigido += f"    <{campo}>{valor}</{campo}>\n"
        
        xml_corrigido += "  </Cabecalho>\n"
        xml_corrigido += "  <Produtos>\n"
        
        for idx, produto in produtos_editados.iterrows():
            xml_corrigido += f"    <Produto id='{idx + 1}'>\n"
            for campo, valor in produto.items():
                xml_corrigido += f"      <{campo}>{valor}</{campo}>\n"
            xml_corrigido += "    </Produto>\n"
        
        xml_corrigido += "  </Produtos>\n"
        xml_corrigido += "</NFe>"
        
        # Download
        st.download_button(
            label="Download XML Corrigido",
            data=xml_corrigido,
            file_name=f"nfe_corrigida_{st.session_state.get('timestamp_processamento', 'unknown').replace(':', '-')[:19]}.xml",
            mime="application/xml",
            use_container_width=True
        )
        
    except Exception as e:
        st.error(f"Erro ao gerar XML: {str(e)}")

def exibir_relatorio_tributarista_completo():
    """Exibe o relat√≥rio h√≠brido completo do tributarista"""
    resultado_tributarista = st.session_state.get('resultado_tributarista', {})
    
    if not resultado_tributarista:
        st.error("Resultado do tributarista n√£o encontrado")
        return
    
    # Verificar se existe o relat√≥rio h√≠brido
    relatorio_hibrido = resultado_tributarista.get('relatorio_hibrido')
    
    if not relatorio_hibrido:
        st.warning("Relat√≥rio tribut√°rio h√≠brido n√£o dispon√≠vel")
        return
    
    # Exibir o relat√≥rio h√≠brido em formato markdown
    st.subheader("Relat√≥rio Tribut√°rio Completo")
    st.markdown("---")
    
    # Mostrar o relat√≥rio h√≠brido completo como markdown
    st.markdown(relatorio_hibrido)
    
    # Op√ß√£o para download do relat√≥rio como texto
    st.download_button(
        label="Download Relat√≥rio Tribut√°rio (TXT)",
        data=relatorio_hibrido,
        file_name=f"relatorio_tributario_{st.session_state.get('timestamp_processamento', 'unknown').replace(':', '-')[:19]}.txt",
        mime="text/plain",
        use_container_width=True
    )

def main():
    """Fun√ß√£o main para quando executado diretamente"""
    exibir_pagina_revisao()

if __name__ == "__main__":
    main()